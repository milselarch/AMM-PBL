var canvas = document.getElementById('canvas');var context = canvas.getContext('2d');var canvas_bg = document.getElementById('canvas_bg');var context_bg = canvas_bg.getContext('2d');var PIX_SCALE = 1000 * 100;var TIME_RES = 1;var TIME_SPEED = 1;var FSPEED = 7817.777019803177;var OSPEED = Math.sqrt(G*M/(6471e3));/*Assuming uniformity of orbitmath.sqrt(G * M * (2/(6471e3)-1/(6371e3)))Assuming orbital dip is distance from new AVG orbital distancemath.sqrt(G * M * (2/(6471e3)-1/(6421e3)))Math.sqrt(G * M * (2 / (6471 * 1000) - 1 / (6421 * 1000)));math.sqrt(2 * G * M * (1 / (6471e3) - 1 / (6471e3 + 6371e3)));*///7817.777019803177//7786.555967045551//7848.394263236514//7818var M = 5.9723 * Math.pow(10, 24); // earth's massvar CG = 6.67408 * Math.pow(10, -11);var CT = Math.pow(PIX_SCALE, 2);var G = CG * PIX_SCALE;console.log()var startTime = Date.now();//each pixel represents 100KMvar sun;var planets;var t0;var dt;var force;var acc;var numPlanets = 4;window.onload = init;function init() {	//console.log("HH", $('div.data').height());	// create a stationary sun	sun = new Ball(63,'rgba(75, 242, 164, 0.01)',M,0,true);	sun.pos2D = new Vector2D(620,500);	//sun.draw(context_bg);	// create planets	planets = new Array();	var radius = new Array(5,6,8,3);	var mass = new Array(10,3,15,10);	var color = new Array('#0000ff','#52AAB2','#00ff00', '#fd7c7c');	var pos = new Array(		new Vector2D(0, 64.71),		new Vector2D(0, 2*64.71),		new Vector2D(0, 64.71),		new Vector2D(0, 64.71),	);	var velo = new Array(		new Vector2D(7848 * PIX_SCALE, 0),		new Vector2D(4848 * PIX_SCALE, 0),		new Vector2D(9848 * PIX_SCALE, 0),		new Vector2D(FSPEED * PIX_SCALE, 0),	);	for (var i=0; i<numPlanets; i++) {		var planet = new Ball(radius[i],color[i],mass[i],0,true);		planet.pos2D = pos[i];		planet.pos2D = planet.pos2D.addScaled(sun.pos2D);		planet.velo2D = velo[i];		planet.ID = "IDD-" + i;		planet.draw(context);		planets.push(planet);	}	display(planets);	$('div.data').ready(function() {		var height = $('div.data').height();		console.log("HH", height);		$("canvas").each(function() {			$(this).css("margin-top", height + 10);		})	})	t0 = Date.now();	animFrame();}function animFrame() {	requestAnimationFrame(animFrame,canvas);	onTimer();}function onTimer() {	var t1 = Date.now();	var num = 0;	if ((t1 - t0) > 20) {		t0 = t1;	} else {		while (t1 > t0) {			t0 += 1 / TIME_RES;			dt = TIME_SPEED * 1 / (CT * TIME_RES);			num++;			move();		}		//console.log(num);	}	//dt = (t1-t0);	//t0 = t1;	//if (dt>0.2) {dt=0;};	//move();}function move() {	context.save();	context.fillStyle = "rgba(0, 0, 0, 0.02)";	context.fillRect(0, 0, canvas.width, canvas.height);	context.restore();	sun.draw(context);	for (var i = 0; i < numPlanets; i++) {		var planet = planets[i];		moveObject(planet);		calcForce(planet);		updateAccel(planet.mass);		updateVelo(planet);		storeMin(planet);		$("#" + planet.ID).text(			pad(" X=" + (planet.x - sun.x).toFixed(0), 10) +			pad(" Y=" + (planet.y - sun.y).toFixed(0), 10) +			pad(" DX=" + (planet.vx / PIX_SCALE).toFixed(0), 16) +			pad(" DY=" + (planet.vy / PIX_SCALE).toFixed(0), 16) +			pad("MIN-D=" + planet.minDist.toFixed(5), 20) +			pad("MAX-D=" + planet.maxDist.toFixed(5), 15)		)	}}function storeMin(planet) {	if (planet.minDist === undefined) {		planet.minDist = Infinity;		planet.maxDist = -Infinity;	}	if (t0 - startTime < 5 * 1000) { return; }	var dist = Vector2D.distance(planet.pos2D, sun.pos2D);	if (dist <=  planet.minDist) {		planet.minDist = dist;	}	if (dist >=  planet.maxDist) {		planet.maxDist = dist;	}}function moveObject(obj) {	obj.pos2D = obj.pos2D.addScaled(obj.velo2D,dt);	obj.draw(context);}function updateAccel(mass) {	acc = force.multiply(1/mass);}function updateVelo(obj) {	obj.velo2D = obj.velo2D.addScaled(acc,dt);}function calcForce(planet) {	force = Forces.gravity(G,M,planet.mass,planet.pos2D.subtract(sun.pos2D));}